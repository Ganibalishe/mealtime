import os
import django
from datetime import date, timedelta
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mealtime_backend.settings")
django.setup()

from django.contrib.auth.models import User
from core.models import (
    Ingredient,
    Recipe,
    RecipeIngredient,
    MealPlan,
    RecipeMealPlan,
    IngredientCategory,
    CookingMethod,
)


def create_test_plans_with_overlapping_ingredients():
    print("üîÑ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–º–∏—Å—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏...")

    # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user = User.objects.get(username="testuser")
        print("‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    except User.DoesNotExist:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ fill_test_data.py")
        return

    # 2. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    ingredients = {ing.name: ing for ing in Ingredient.objects.all()}
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {len(ingredients)}")

    # 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–º–∏—Å—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
    new_recipes_data = [
        {
            "name": "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –∑–∞–ø–µ—á–µ–Ω–Ω—ã–π —Å —Å—ã—Ä–æ–º",
            "description": "–ü—Ä–æ—Å—Ç–æ–µ –∏ –≤–∫—É—Å–Ω–æ–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è",
            "cooking_time": 40,
            "difficulty": "easy",
            "cooking_method": "–ó–∞–ø–µ–∫–∞–Ω–∏–µ",
            "instructions": "1. –ù–∞—Ä–µ–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å\n2. –ü–æ—Å—ã–ø–∞—Ç—å —Å—ã—Ä–æ–º\n3. –ó–∞–ø–µ–∫–∞—Ç—å 40 –º–∏–Ω—É—Ç",
            "portions": 4,
            "ingredients": [
                {"name": "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", "quantity": 8, "unit": "pcs"},
                {"name": "–°—ã—Ä", "quantity": 200, "unit": "g"},
                {"name": "–°–æ–ª—å", "quantity": 1, "unit": "tsp"},
                {"name": "–ß–µ—Å–Ω–æ–∫", "quantity": 3, "unit": "pcs"},
            ],
        },
        {
            "name": "–ö—É—Ä–∏–Ω—ã–π —Å–∞–ª–∞—Ç —Å –æ–≤–æ—â–∞–º–∏",
            "description": "–°—ã—Ç–Ω—ã–π —Å–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π –∏ —Å–≤–µ–∂–∏–º–∏ –æ–≤–æ—â–∞–º–∏",
            "cooking_time": 25,
            "difficulty": "easy",
            "cooking_method": "–°—ã—Ä–æ–µ–¥–µ–Ω–∏–µ",
            "instructions": "1. –û—Ç–≤–∞—Ä–∏—Ç—å –∫—É—Ä–∏—Ü—É\n2. –ù–∞—Ä–µ–∑–∞—Ç—å –æ–≤–æ—â–∏\n3. –°–º–µ—à–∞—Ç—å –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã",
            "portions": 3,
            "ingredients": [
                {"name": "–ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ", "quantity": 300, "unit": "g"},
                {"name": "–ü–æ–º–∏–¥–æ—Ä—ã", "quantity": 3, "unit": "pcs"},
                {"name": "–û–≥—É—Ä—Ü—ã", "quantity": 2, "unit": "pcs"},
                {"name": "–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π", "quantity": 1, "unit": "pcs"},
                {"name": "–°–æ–ª—å", "quantity": 1, "unit": "tsp"},
            ],
        },
        {
            "name": "–û–≤–æ—â–Ω–æ–π —Å—É–ø —Å –∫—É—Ä–∏—Ü–µ–π",
            "description": "–õ–µ–≥–∫–∏–π —Å—É–ø —Å –∫—É—Ä–∏—Ü–µ–π –∏ —Å–µ–∑–æ–Ω–Ω—ã–º–∏ –æ–≤–æ—â–∞–º–∏",
            "cooking_time": 35,
            "difficulty": "medium",
            "cooking_method": "–í–∞—Ä–∫–∞",
            "instructions": "1. –°–≤–∞—Ä–∏—Ç—å –∫—É—Ä–∏–Ω—ã–π –±—É–ª—å–æ–Ω\n2. –î–æ–±–∞–≤–∏—Ç—å –æ–≤–æ—â–∏\n3. –í–∞—Ä–∏—Ç—å –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏",
            "portions": 4,
            "ingredients": [
                {"name": "–ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ", "quantity": 400, "unit": "g"},
                {"name": "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", "quantity": 4, "unit": "pcs"},
                {"name": "–ú–æ—Ä–∫–æ–≤—å", "quantity": 2, "unit": "pcs"},
                {"name": "–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π", "quantity": 1, "unit": "pcs"},
                {"name": "–°–æ–ª—å", "quantity": 2, "unit": "tsp"},
            ],
        },
        {
            "name": "–Ø–∏—á–Ω–∏—Ü–∞ —Å –ø–æ–º–∏–¥–æ—Ä–∞–º–∏ –∏ –ª—É–∫–æ–º",
            "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫",
            "cooking_time": 10,
            "difficulty": "easy",
            "cooking_method": "–ñ–∞—Ä–∫–∞",
            "instructions": "1. –û–±–∂–∞—Ä–∏—Ç—å –ª—É–∫ –∏ –ø–æ–º–∏–¥–æ—Ä—ã\n2. –í–ª–∏—Ç—å —è–π—Ü–∞\n3. –ñ–∞—Ä–∏—Ç—å –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏",
            "portions": 2,
            "ingredients": [
                {"name": "–Ø–π—Ü–∞", "quantity": 4, "unit": "pcs"},
                {"name": "–ü–æ–º–∏–¥–æ—Ä—ã", "quantity": 2, "unit": "pcs"},
                {"name": "–õ—É–∫ —Ä–µ–ø—á–∞—Ç—ã–π", "quantity": 0.5, "unit": "pcs"},
                {"name": "–°–æ–ª—å", "quantity": 1, "unit": "tsp"},
            ],
        },
    ]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è "–ó–∞–ø–µ–∫–∞–Ω–∏–µ"
    baking_method, _ = CookingMethod.objects.get_or_create(name="–ó–∞–ø–µ–∫–∞–Ω–∏–µ")

    new_recipes = {}
    for recipe_data in new_recipes_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ü–µ–ø—Ç
        recipe, created = Recipe.objects.get_or_create(
            name=recipe_data["name"],
            defaults={
                "description": recipe_data["description"],
                "cooking_time": recipe_data["cooking_time"],
                "difficulty": recipe_data["difficulty"],
                "cooking_method": baking_method,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–µ–∫–∞–Ω–∏–µ –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç
                "instructions": recipe_data["instructions"],
                "portions": recipe_data["portions"],
            },
        )

        new_recipes[recipe_data["name"]] = recipe

        if created:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∫ —Ä–µ—Ü–µ–ø—Ç—É
            for ing_data in recipe_data["ingredients"]:
                if ing_data["name"] in ingredients:
                    RecipeIngredient.objects.create(
                        recipe=recipe,
                        ingredient=ingredients[ing_data["name"]],
                        quantity=ing_data["quantity"],
                    )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ä–µ—Ü–µ–ø—Ç: {recipe_data['name']}")
        else:
            print(f"‚ö†Ô∏è –†–µ—Ü–µ–ø—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {recipe_data['name']}")

    # 4. –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 4 –¥–Ω—è
    print("\nüîÑ –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 4 –¥–Ω—è...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –∫–∞–∫ –Ω–∞—á–∞–ª–æ
    start_date = date.today() + timedelta(days=1)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
    meal_assignments = {
        "breakfast": ["–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏", "–Ø–∏—á–Ω–∏—Ü–∞ —Å –ø–æ–º–∏–¥–æ—Ä–∞–º–∏ –∏ –ª—É–∫–æ–º"],
        "lunch": [
            "–ö—É—Ä–∏–Ω—ã–π —Å—É–ø —Å –ª–∞–ø—à–æ–π",
            "–û–≤–æ—â–Ω–æ–π —Å—É–ø —Å –∫—É—Ä–∏—Ü–µ–π",
            "–ì—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞ —Å –≥—Ä–∏–±–∞–º–∏",
        ],
        "dinner": [
            "–°–∞–ª–∞—Ç –∏–∑ —Å–≤–µ–∂–∏—Ö –æ–≤–æ—â–µ–π",
            "–ö—É—Ä–∏–Ω—ã–π —Å–∞–ª–∞—Ç —Å –æ–≤–æ—â–∞–º–∏",
            "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –∑–∞–ø–µ—á–µ–Ω–Ω—ã–π —Å —Å—ã—Ä–æ–º",
            "–ó–∞–ø–µ—á–µ–Ω–Ω–∞—è –∫—É—Ä–∏—Ü–∞ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º",
        ],
    }

    created_plans = []

    for day in range(4):  # –ù–∞ 4 –¥–Ω—è
        current_date = start_date + timedelta(days=day)

        for meal_type, available_recipes in meal_assignments.items():
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
            existing_recipes = [
                r
                for r in available_recipes
                if r in new_recipes
                or r
                in Recipe.objects.filter(name__in=available_recipes).values_list(
                    "name", flat=True
                )
            ]

            if not existing_recipes:
                print(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è {meal_type}")
                continue

            recipe_name = random.choice(existing_recipes)

            # –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ü–µ–ø—Ç –≤ –±–∞–∑–µ
            try:
                recipe = Recipe.objects.get(name=recipe_name)
            except Recipe.DoesNotExist:
                print(f"‚ö†Ô∏è –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {recipe_name}")
                continue

            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
            meal_plan, created = MealPlan.objects.get_or_create(
                user=user, date=current_date, meal_type=meal_type
            )

            if created:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ –ø–ª–∞–Ω
                RecipeMealPlan.objects.create(
                    meal_plan=meal_plan,
                    recipe=recipe,
                    portions=random.randint(2, 4),
                    order=1,
                )

                created_plans.append(
                    {
                        "date": current_date,
                        "meal_type": meal_type,
                        "recipe": recipe.name,
                    }
                )

                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω: {current_date} - {meal_type} - {recipe.name}")

    # 5. –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫:")
    print(f"   –ù–∞—á–∞–ª–æ: {start_date}")
    print(f"   –ö–æ–Ω–µ—Ü: {start_date + timedelta(days=3)}")
    print(f"   –í—Å–µ–≥–æ –ø–ª–∞–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(created_plans)}")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:")

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
    all_ingredients = {}
    for plan_info in created_plans:
        meal_plan = MealPlan.objects.get(
            user=user, date=plan_info["date"], meal_type=plan_info["meal_type"]
        )

        for recipe_plan in meal_plan.recipes.all():
            recipe = recipe_plan.recipe
            for ingredient in recipe.ingredients.all():
                ing_name = ingredient.ingredient.name
                if ing_name not in all_ingredients:
                    all_ingredients[ing_name] = {
                        "quantity": 0,
                        "recipes": set(),
                        "unit": ingredient.ingredient.default_unit,
                    }

                # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ä—Ü–∏–∏
                portions_factor = recipe_plan.portions / recipe.portions
                all_ingredients[ing_name]["quantity"] += (
                    float(ingredient.quantity) * portions_factor
                )
                all_ingredients[ing_name]["recipes"].add(recipe.name)

    print("üìã –û–∂–∏–¥–∞–µ–º—ã–π –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:")
    for ing_name, data in sorted(all_ingredients.items()):
        print(
            f"   {ing_name}: {data['quantity']} {data['unit']} (–≤ —Ä–µ—Ü–µ–ø—Ç–∞—Ö: {', '.join(data['recipes'])})"
        )

    print("\nüîó –ü—Ä–∏–º–µ—Ä curl –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"curl -X POST http://127.0.0.1:8000/api/shopping-lists/generate/ \\")
    print(f'  -H "Authorization: Bearer YOUR_TOKEN" \\')
    print(f'  -H "Content-Type: application/json" \\')
    print(
        f'  -d \'{{"start_date": "{start_date}", "end_date": "{start_date + timedelta(days=3)}"}}\''
    )

    print(
        "\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫."
    )


if __name__ == "__main__":
    create_test_plans_with_overlapping_ingredients()
