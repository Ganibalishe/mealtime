# management/commands/load_ingredients.py
import json
import os
from django.core.management.base import BaseCommand
from django.db import transaction
from core.models import IngredientCategory, Ingredient

class Command(BaseCommand):
    help = 'Load ingredients from JSON file into database'

    def add_arguments(self, parser):
        parser.add_argument(
            '--file',
            type=str,
            help='Path to JSON file with ingredients',
            default='ingredients.json'
        )

    def load_categories_map(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        categories = {}
        for category in IngredientCategory.objects.all():
            categories[category.name] = category
        return categories

    @transaction.atomic
    def handle(self, *args, **options):
        file_path = options['file']

        if not os.path.exists(file_path):
            self.stdout.write(
                self.style.ERROR(f'File {file_path} not found!')
            )
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_map = self.load_categories_map()
        self.stdout.write(f"Loaded {len(categories_map)} categories")

        # –ß–∏—Ç–∞–µ–º JSON —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
        with open(file_path, 'r', encoding='utf-8') as f:
            ingredients_data = json.load(f)

        created_count = 0
        updated_count = 0
        error_count = 0

        for ing_data in ingredients_data:
            try:
                category_name = ing_data["category"]
                category = categories_map.get(category_name)

                if not category:
                    self.stdout.write(
                        self.style.ERROR(f'Category "{category_name}" not found for ingredient {ing_data["name"]}')
                    )
                    error_count += 1
                    continue

                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
                ingredient, created = Ingredient.objects.get_or_create(
                    name=ing_data["name"],
                    defaults={
                        "category": category,
                        "default_unit": ing_data["default_unit"]
                    }
                )

                if created:
                    self.stdout.write(
                        self.style.SUCCESS(f'‚úÖ Created: {ing_data["name"]} ({ing_data["default_unit"]})')
                    )
                    created_count += 1
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                    if (ingredient.category != category or
                        ingredient.default_unit != ing_data["default_unit"]):
                        ingredient.category = category
                        ingredient.default_unit = ing_data["default_unit"]
                        ingredient.save()
                        self.stdout.write(
                            self.style.WARNING(f'üîÑ Updated: {ing_data["name"]}')
                        )
                        updated_count += 1
                    else:
                        self.stdout.write(
                            self.style.NOTICE(f'üìÅ Exists: {ing_data["name"]}')
                        )

            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå Error with {ing_data["name"]}: {str(e)}')
                )
                error_count += 1

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write("\n" + "="*50)
        self.stdout.write(
            self.style.SUCCESS(
                f"üéâ –ò—Ç–æ–≥: –°–æ–∑–¥–∞–Ω–æ: {created_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}, –û—à–∏–±–æ–∫: {error_count}"
            )
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.stdout.write("\nüìã –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category in IngredientCategory.objects.all().order_by('order'):
            ingredients = Ingredient.objects.filter(category=category).order_by('name')
            if ingredients.exists():
                self.stdout.write(f"\n{category.name}:")
                for ing in ingredients:
                    self.stdout.write(f"  - {ing.name} ({ing.get_default_unit_display()})")